// <auto-generated />
using System;
using DBAcces.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBAcces.Migrations
{
    [DbContext(typeof(WineFactoryContext))]
    [Migration("20240305014100_PrimeraMigracion")]
    partial class PrimeraMigracion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WineFactory.Container", b =>
                {
                    b.Property<int>("ContainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContainerId"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("Empty")
                        .HasColumnType("bit");

                    b.Property<int>("LocalId")
                        .HasColumnType("int");

                    b.HasKey("ContainerId");

                    b.HasIndex("LocalId");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("WineFactory.Local", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocalId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocalId");

                    b.ToTable("Local");
                });

            modelBuilder.Entity("WineFactory.Wine", b =>
                {
                    b.Property<int>("WineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WineId"), 1L, 1);

                    b.Property<int>("ContainerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<float?>("FinalBrix")
                        .HasColumnType("real");

                    b.Property<float?>("FinalDensity")
                        .HasColumnType("real");

                    b.Property<float>("HoneyWeight")
                        .HasColumnType("real");

                    b.Property<float>("InitialBrix")
                        .HasColumnType("real");

                    b.Property<float>("InitialDensity")
                        .HasColumnType("real");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Yeast")
                        .HasColumnType("real");

                    b.HasKey("WineId");

                    b.HasIndex("ContainerId")
                        .IsUnique();

                    b.ToTable("Wines");
                });

            modelBuilder.Entity("WineFactory.Container", b =>
                {
                    b.HasOne("WineFactory.Local", "Local")
                        .WithMany("Containers")
                        .HasForeignKey("LocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Local");
                });

            modelBuilder.Entity("WineFactory.Wine", b =>
                {
                    b.HasOne("WineFactory.Container", "Container")
                        .WithOne("Wine")
                        .HasForeignKey("WineFactory.Wine", "ContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Container");
                });

            modelBuilder.Entity("WineFactory.Container", b =>
                {
                    b.Navigation("Wine");
                });

            modelBuilder.Entity("WineFactory.Local", b =>
                {
                    b.Navigation("Containers");
                });
#pragma warning restore 612, 618
        }
    }
}
